from brownie import *
from helpers.constants import AddressZero
from dotmap import DotMap
from helpers.registry import registry, artifacts
from brownie.utils import color
import brownie

"""
App IDs generated by this deploy
"0x9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a"
"0xbf8491150dafc5dcaee5b861414dca922de09ccffa344964ae167212e8c673ae"
"0x6b20a3010614eeebf2138ccec99f028a61c811b3b1a3343b6ff635985c75c91f"
"0x9fa3927f639745e587912d4b0fea7ef9013bf93fb907d29faeab57417ba6e1d4"
"""


def namehash(ensDomain):
    """
    Return namehash of supplied domain as hex string
    """
    return str(web3._mainnet.toHex(web3._mainnet.ens.namehash(ensDomain)))


# print(
#     'Name Hashes',
#     namehash("agent.aragonpm.eth"),
#     namehash("vault.aragonpm.eth"),
#     namehash("voting.aragonpm.eth"),
#     namehash("finance.aragonpm.eth"),
#     namehash("token-manager.aragonpm.eth"),
# )

apps = {}
apps[namehash("agent.aragonpm.eth")] = {
    "name": "agent",
    "contractName": "Agent",
    "artifact": artifacts.aragon.Agent,
}
apps[namehash("vault.aragonpm.eth")] = {
    "name": "vault",
    "contractName": "Vault",
    "artifact": artifacts.aragon.Vault,
}
apps[namehash("voting.aragonpm.eth")] = {
    "name": "voting",
    "contractName": "Voting",
    "artifact": artifacts.aragon.Voting,
}
apps[namehash("finance.aragonpm.eth")] = {
    "name": "finance",
    "contractName": "Finance",
    "artifact": artifacts.aragon.Finance,
}
apps[namehash("token-manager.aragonpm.eth")] = {
    "name": "token-manager",
    "contractName": "TokenManager",
    "artifact": artifacts.aragon.TokenManager,
}


def get_app_by_id(id):
    return apps[id]


def connect_aragon():
    return AragonSystem()


class AragonSystem:
    def __init__(self):
        self.companyTemplate = Contract.from_abi(
            "CompanyTemplate",
            web3.toChecksumAddress(registry.aragon.addresses.companyTemplate),
            artifacts.aragon.CompanyTemplate["abi"],
        )

    def getVotingAt(self, address):
        return Contract.from_abi(
            "Voting",
            web3.toChecksumAddress(address),
            artifacts.aragon.Voting["abi"],
        )

    def deployCompanyDao(self, params, signer):
        """
        Deploy DAO using company template with specified parameters
        """
        tx = self.companyTemplate.newTokenAndInstance(
            params.tokenName,
            params.tokenSymbol,
            params.id,
            params.holders,
            params.stakes,
            [params.supportRequired, params.minAcceptanceQuorum, params.voteDuration],
            params.financePeriod,
            params.useAgentAsVault,
            {"from": signer},
        )

        deployed = DotMap()

        # print(tx.events["DeployDao"])
        # print(tx.events["DeployToken"])
        # print(tx.events["InstalledApp"])

        daoAddress = tx.events["DeployDao"][0]["dao"]
        tokenAddress = tx.events["DeployToken"][0]["token"]

        deployed.kernel = Contract.from_abi(
            "Kernel", daoAddress, artifacts.aragon.Kernel["abi"]
        )

        deployed.token = Contract.from_abi(
            "MiniMeToken", tokenAddress, artifacts.aragon.MiniMeToken["abi"]
        )

        for appEvent in tx.events["InstalledApp"]:
            appData = get_app_by_id(str(appEvent["appId"]))
            # eg: deployed.agent = Agent.at(<event proxy>)
            deployed[appData["name"]] = Contract.from_abi(
                appData["contractName"],
                appEvent["appProxy"],
                appData["artifact"]["abi"],
            )
        return deployed

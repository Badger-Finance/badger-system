from brownie import *
from scripts.connect_account import connect_account
from scripts.get_address import get_address
from helpers.console_utils import console
from scripts.systems.badger_system import connect_badger

defaults = {
        "create2Deployer": "0x04254eba6Ba1EA9516A753C85D450E06c1Eba5a3",
        "bricked": "0x19a21Fbba3561aD53e70268caFA3D3c8db05A79C",
        "proxyAdminPassThru": "0x3F204A06AB6A6B6Bb437B58Ae39B56B906927D95",
        "proxyAdminDev": "0xC4fE5Db8D3c0d0f410D6A7496Faa4f1658d2a301",
        "proxyAdminTimelock": "0x9208E6c28959c47E58344d5f84d88F07Fca96CFC",
        "controller": "0xc00e71719d1494886942d6277DAeA20494cf0EeC",
        "sushiWbtcWethLp": "0x30bCE7386e016D6038201F57D1bA52CbA7AEFeCf"
}

def deploy_create_2(create_2_deployer, bytecode, salt, overrides):
        console.print(f"[green]Deploying via Create2Deployer....[/green]")
        tx = create_2_deployer.deploy(bytecode, salt, overrides)
        event = tx.events['Deployed'][0]
        console.log(event)
        return event['addr']

proxy_salt_names = ["BadgerRegistryV1", "Controller", "PassThruProxyAdminManager", "BadgerRegistryV2", "BadgerTree"]

def create_2_proxy(): 
        bytecode = "0x60806040526040516108d23803806108d28339818101604052606081101561002657600080fd5b8151602083015160408085018051915193959294830192918464010000000082111561005157600080fd5b90830190602082018581111561006657600080fd5b825164010000000081118282018810171561008057600080fd5b82525081516020918201929091019080838360005b838110156100ad578181015183820152602001610095565b50505050905090810190601f1680156100da5780820380516001836020036101000a031916815260200191505b50604052508491508290506100ee826101bf565b8051156101a6576000826001600160a01b0316826040518082805190602001908083835b602083106101315780518252601f199092019160209182019101610112565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b50509050806101a457600080fd5b505b506101ae9050565b6101b782610231565b50505061025b565b6101d28161025560201b6103b41760201c565b61020d5760405162461bcd60e51b815260040180806020018281038252603b815260200180610897603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b3b151590565b61062d8061026a6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100985780635c60da1b146101185780638f28397014610149578063f851a4401461017c5761005d565b3661005d5761005b610191565b005b61005b610191565b34801561007157600080fd5b5061005b6004803603602081101561008857600080fd5b50356001600160a01b03166101ab565b61005b600480360360408110156100ae57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100d957600080fd5b8201836020820111156100eb57600080fd5b8035906020019184600183028401116401000000008311171561010d57600080fd5b5090925090506101e5565b34801561012457600080fd5b5061012d610292565b604080516001600160a01b039092168252519081900360200190f35b34801561015557600080fd5b5061005b6004803603602081101561016c57600080fd5b50356001600160a01b03166102cf565b34801561018857600080fd5b5061012d610389565b6101996103ba565b6101a96101a461041a565b61043f565b565b6101b3610463565b6001600160a01b0316336001600160a01b031614156101da576101d581610488565b6101e2565b6101e2610191565b50565b6101ed610463565b6001600160a01b0316336001600160a01b031614156102855761020f83610488565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461026c576040519150601f19603f3d011682016040523d82523d6000602084013e610271565b606091505b505090508061027f57600080fd5b5061028d565b61028d610191565b505050565b600061029c610463565b6001600160a01b0316336001600160a01b031614156102c4576102bd61041a565b90506102cc565b6102cc610191565b90565b6102d7610463565b6001600160a01b0316336001600160a01b031614156101da576001600160a01b0381166103355760405162461bcd60e51b81526004018080602001828103825260368152602001806105876036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61035e610463565b604080516001600160a01b03928316815291841660208301528051918290030190a16101d5816104c8565b6000610393610463565b6001600160a01b0316336001600160a01b031614156102c4576102bd610463565b3b151590565b6103c2610463565b6001600160a01b0316336001600160a01b031614156104125760405162461bcd60e51b81526004018080602001828103825260328152602001806105556032913960400191505060405180910390fd5b6101a96101a9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561045e573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b610491816104ec565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104f5816103b4565b6105305760405162461bcd60e51b815260040180806020018281038252603b8152602001806105bd603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a264697066735822122073c4c21e5c673ed7cd3c216206991b426c7391cadd714e9a2c3f3ee94217be2b64736f6c634300060c003343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e7472616374206164647265737300000000000000000000000019a21fbba3561ad53e70268cafa3d3c8db05a79c0000000000000000000000003f204a06ab6a6b6bb437b58ae39b56b906927d9500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000"
        # #     salt = 0
        # contract_name = "sdogiasjodfjsdiofsjos22fi"
        contract_name = "BadgerTree"
        salt = int(web3.keccak(text=contract_name).hex(), 16)
        new_logic = "0x8B459F4d8949f3748dC34430bc91441C954dc391"

        create_2_deployer = interface.IAnyswapCreate2Deployer(defaults["create2Deployer"])

        logic = defaults["bricked"]
        proxy_admin = interface.IProxyAdmin(defaults["proxyAdminPassThru"])
        
        # new_admin = "0x4599f2913a3db4e73aa77a304ccc21516dd7270d"

        dev = connect_account()

        deployed = deploy_create_2(create_2_deployer, bytecode, salt, {'from': dev, "gas_limit": 1500000, "allow_revert": True})

        # # dev = accounts.at(proxy_admin.owner(), force=True)
        
        # console.print(f"        Logic -> {new_logic}")
        proxy_admin.upgrade(deployed, new_logic, {'from': dev})

        # console.print(f"        ProxyAdmin -> {new_admin}")
        # proxy_admin.changeProxyAdmin(deployed, new_admin, {'from': dev})

        # # ===== + Initialize =====
        
        # BadgerRegistryV1.at(deployed).initialize(dev, {'from': dev})

        # # ===== - Initialize =====

        console.print(f"[green]🏭 Deployed {deployed} via Create2Deployer with salt {salt}[/green]")

def main():
        # create_2_proxy()
        create_2_proxy()
        

def add_and_promote_all_vaults():
        registry = BadgerRegistryV1.at("0x22765948a3d5048f3644b81792e4e1aa7ea3da4a")
        dev = connect_account()
        badger = connect_badger()

        for sett_id in badger.getAllSettIds():
                from helpers.gas_utils import gas_strategies
                gas_strategies.set_default_for_active_chain()

                sett = badger.getSett(sett_id)
                console.print(f"Adding sett {sett_id} {sett.address}")
                registry.add(sett, {'from': dev})
                registry.promote(sett, {'from': dev})


